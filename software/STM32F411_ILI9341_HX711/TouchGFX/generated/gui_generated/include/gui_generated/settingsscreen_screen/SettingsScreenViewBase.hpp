/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGSSCREENVIEWBASE_HPP
#define SETTINGSSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settingsscreen_screen/SettingsScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>

class SettingsScreenViewBase : public touchgfx::View<SettingsScreenPresenter>
{
public:
    SettingsScreenViewBase();
    virtual ~SettingsScreenViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void calCy1Clicked()
    {
        // Override and implement this function in SettingsScreen
    }
    virtual void calCy0Clicked()
    {
        // Override and implement this function in SettingsScreen
    }
    virtual void calCx0Clicked()
    {
        // Override and implement this function in SettingsScreen
    }
    virtual void calCx1Clicked()
    {
        // Override and implement this function in SettingsScreen
    }
    virtual void saveClicked()
    {
        // Override and implement this function in SettingsScreen
    }
    virtual void restoreClicked()
    {
        // Override and implement this function in SettingsScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::Button button1;
    touchgfx::TextAreaWithOneWildcard textAreaCy1;
    touchgfx::TextAreaWithOneWildcard textAreaCx1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonCy1;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonCy0;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonCx0;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonCx1;
    touchgfx::TextAreaWithOneWildcard textAreaCx0;
    touchgfx::TextAreaWithOneWildcard textAreaCy0;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::TextAreaWithOneWildcard textArea2;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonSave;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  flexButtonReset;
    touchgfx::Line lineH1;
    touchgfx::PainterRGB565 lineH1Painter;
    touchgfx::Line lineH0;
    touchgfx::PainterRGB565 lineH0Painter;
    touchgfx::Line lineH2;
    touchgfx::PainterRGB565 lineH2Painter;
    touchgfx::Line lineH3;
    touchgfx::PainterRGB565 lineH3Painter;
    touchgfx::Line lineV1;
    touchgfx::PainterRGB565 lineV1Painter;
    touchgfx::Line lineV2;
    touchgfx::PainterRGB565 lineV2Painter;
    touchgfx::Line lineV0;
    touchgfx::PainterRGB565 lineV0Painter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREACY1_SIZE = 7;
    touchgfx::Unicode::UnicodeChar textAreaCy1Buffer[TEXTAREACY1_SIZE];
    static const uint16_t TEXTAREACX1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaCx1Buffer[TEXTAREACX1_SIZE];
    static const uint16_t TEXTAREACX0_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaCx0Buffer[TEXTAREACX0_SIZE];
    static const uint16_t TEXTAREACY0_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaCy0Buffer[TEXTAREACY0_SIZE];
    static const uint16_t TEXTAREA1_SIZE = 8;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];
    static const uint16_t TEXTAREA2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textArea2Buffer[TEXTAREA2_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SettingsScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<SettingsScreenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // SETTINGSSCREENVIEWBASE_HPP
